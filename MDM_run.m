
function [MDM]=MDM_run(Parameter_path,TV_path,Seg_path,save_fig,saveat,flags)

%    MDM is a software package designed to calculate the derivative of a qMRI parameter relative to
%    MTV (MDM signature). The software and the sensetivity of MDM measurments
%    to molecular composition are described in the following article:
%    "Disentangling molecular alterations from water-content changes in the aging human brain using quantitative MRI"
%
%    example= MDM_run(Parameter_path,TV_path,Seg_path,1,saveat_path,{'par_max',0.5,'par_min',0.1,'Parameter_str','R1'})
%
%
%    INPUT:
%
%     Parameter_path:   Path to a Nifti of a qMRI map (R1 map, MTsat map, etc.) that will be 
%                       derived relative to MTV. 
%            TV_path:   Path to a Nifti of a MTV map (with *the same resolusion* as the qMRI map).
%                       For more information regarding MTV map see: https://github.com/mezera/mrQ
%           Seg_path:   Path to a Nifti of a brain segmentation or a ROI
%                       mask (with *the same resolusion* as the qMRI map).
%                       The software will calculate the MTV derivatives for
%                       all ROIs (with lables other than zero) in the segmentation
%                       file.
%           save_fig:   1/0 depending on whether or the user would like to save the output (1) or not (0).
%             saveat:   path to a directory where the output will be saved.
%              flags:   every parameter that you would like to be
%                       different from default can be given here. This
%                       input will be expected to come as a cell array
%                       and in pairs. There are 3 parameters that can be
%                       defined here: (1) 'Parameter_str' is the name of the
%                       qMRI parameter (for example 'R1') to be used in the
%                       figures. (2) 'Parameter_max' and (3) 'Parameter_min' 
%                       represent the range of values for the qMRI
%                       parameter (to be used in the figures).
%                       for example: {'par_max',0.5,'par_min',0.1,'Parameter_str','R1'}
%
%   OUTPUT:
%
%       This function creates and saves the MDM strucure to the 'saveat'
%       directory. In this structure you can find:
%            *  The different inputs to the function will be saved.
%            *  The MTV derivatives (MDM measurements) will be saved in the
%               fit matrix. This is an MX2 matrix where M is the number of ROIs in the segmentation 
%               and the columns are:
%               1) the slope of the linear relationship between the qMRI parameter and MTV (MDM
%               measurement)
%               2) the intersection of the linear relationship between the qMRI
%               parameter and MTV.
%            *  For each ROI, the data point used to fit the linear relationship between the qMRI
%               parameter and MTV, generated by binning over these two
%               parameters, are saved in BinTV and BinPar respectively. 
%               The STD of the qMRI parameter in each bin is saved in STD.   
%
%   SOFTWARE REQUIREMENTS: 
%
%            * MATLAB          - http://www.mathworks.com/products/matlab/
%            * Vistasoft       - https://github.com/vistalab/vistasoft   
%            * boundedline-pkg - https://github.com/kakearney/boundedline-pkg
%
% (C) Mezer lab, the Hebrew University of Jerusalem, Israel, Copyright 2019

%% set the MDM structure

MDM=struct;
MDM.Parameter_path=Parameter_path;
MDM.TV_path=TV_path;
MDM.Seg_path=Seg_path;
MDM.saveat=saveat;
MDM.save_fig=save_fig;

% create folder for this analysis in the saveat dir.
mkdir(MDM.saveat);

%% set undefined flags

if ~notDefined('flags')
    if ~isempty(flags)
        for ii = 1:2:numel(flags)-1
            % Check to make sure that the argument is formatted properly
            if ischar(flags{ii+1})
            eval([flags{ii},'=','''' (flags{ii+1}) ''';'])
            else
            eval([flags{ii},'=',num2str(flags{ii+1}) ';'])
            end
        end
    end
end

if notDefined('Parameter_str') % The name of the qMRI parameter
    MDM.str_par='qMRI parameter';
else
    MDM.str_par=Parameter_str;
end

if notDefined('Parameter_max') || notDefined('Parameter_min') % The range of values for the  chosen qMRI parameter
    parameter=readFileNifti(MDM.Parameter_path);
    parameter=parameter.data;
    MDM.range=minmax(parameter(:)');
else
    MDM.range=[Parameter_min Parameter_max];
end

%% Set files

disp('MDM - setting files...');

% MTV
TVs=readFileNifti(MDM.TV_path);
TV=double(TVs.data);
MDM.TV_str='MTV';
MDM.TV_range=[0 0.4];

% qMRI Parameter
Parameter=readFileNifti(MDM.Parameter_path);
Parameter=double(Parameter.data);

% Segmentation
seg=readFileNifti(MDM.Seg_path);
seg=seg.data;
 
%% Subcortical regions 

disp('MDM - calculate MTV derivatives ');

% find all labels in the segmentation file:
C=unique(seg); 
C(C==0)=[];

% fit the linear relationship between the qMRI parameter and MTV:
[MDM]=MDM_fit(MDM,C,TV,seg,Parameter); 

% plot the voxel-by-voxel distribution of the qMRI parameter relative to MTV for each ROI: 
MDM_dist_fig(MDM,C,TV,Parameter,seg,MDM.BinTV,MDM.BinPar,MDM.STD,MDM.fit);

% plot the linear relationship between the qMRI parameter and MTV for each ROI:
MDM_figure(MDM,C,MDM.BinTV,MDM.BinPar,MDM.STD,MDM.fit)

%% save MDM structure

if MDM.save_fig==1
    save(fullfile(MDM.saveat,['/MDM.mat']),'MDM')
end

end